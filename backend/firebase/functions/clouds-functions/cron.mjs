/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { onSchedule } from "firebase-functions/v2/scheduler";
import { Expo } from "expo-server-sdk";
import { getUsersToNotify, deleteUser } from "../api/services/notificationsService.mjs";
import { connectdb } from "../db/db.mjs";

// initialisation de l'objet Expo
const expo = new Expo();

// fonction planifi√©e tous les jours √† 19h (heure de Paris) pour notifier les utilisateurs
export const dailyUserNotifications = onSchedule(
    {
        schedule: "0 19 * * *", // tous les jours √† 19h (minute, heure, jour, mois, jour de la semaine)
        timeZone: "Europe/Paris",
        region: "europe-west1"
    },
    async (event) => {
        console.log("‚è∞ Lancement de la v√©rification quotidienne des utilisateurs √† notifier...");
        try {
            // connexion √† la base de donn√©es
            await connectdb();

            // r√©cup√©ration des expo tokens des utilisateurs √† notifier
            const tokens = await getUsersToNotify();

            if (tokens.length === 0) {
                console.log("‚úÖ Aucun utilisateur √† notifier aujourd‚Äôhui");
                return null;
            }

            // construction des messages
            let messages = [];
            for (const token of tokens) {
                // suppression des tokens non valides (pas au format ExpoPushToken[...])
                if (!Expo.isExpoPushToken(token)) {
                    console.log("‚ùå Token invalide :", token);
                    try {
                        await deleteUser(token);
                    } catch (err) {
                        console.error("‚ùå Erreur lors de la suppression d'un utilisateur :", err.message);
                    }
                    continue;
                }

                messages.push({
                    to: token,
                    sound: "default",
                    title: "Ton bilan carbone t‚Äôattend !",
                    body: "D√©couvre combien de CO2 tu as √©mis aujourd‚Äôhui üëÄ",
                    data: { type: "reminder" },
                });
            }

            // divise en chunk pour √©viter les limites Expo
            const chunks = expo.chunkPushNotifications(messages);

            // envoi des notifications
            for (let chunk of chunks) {
                try {
                    const tickets = await expo.sendPushNotificationsAsync(chunk);
                    // console.log("üëâ Tickets re√ßus :", tickets);

                    // suppression des tokens p√©rim√©s (utilisateurs qui ont supprim√© l'app)
                    for (let i = 0; i < tickets.length; i++) {
                        const ticket = tickets[i];
                        const token = chunk[i].to;
                        if (ticket.status === "error" && ticket.details?.error === "DeviceNotRegistered") {
                            console.log("üîÑ Token non valide, suppression de l'utilisateur de la base de donn√©es");
                            try {
                                await deleteUser(token);
                            } catch (err) {
                                console.error("‚ùå Erreur lors de la suppression d'un utilisateur :", err.message);
                            }
                        }
                    }
                } catch (err) {
                    console.error("‚ùå Erreur lors de l'envoi d'une notification :", err.message);
                }
            }

            console.log("‚úÖ Notifications envoy√©es avec succ√®s !");

        } catch (error) {
            console.error("‚ùå Erreur lors de la v√©rification quotidienne des utilisateurs √† notifier :", error.message);
        }

        return null;
    });