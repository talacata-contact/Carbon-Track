/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { MongoClient } from 'mongodb';
import { getdbConfig } from './config.js';
import { logementsChauffages, transportsCategories, moyennesFr, suggestions } from './tables.js';

class MongoDB {
    // constructeur
    constructor() {
        this.client = null;
        this.db = null;
        this.config = getdbConfig();
    }

    /////////////////////////////////////////////////////////////////////////////////////
    // DB
    /////////////////////////////////////////////////////////////////////////////////////

    // fonction pour se connecter √† la base de donn√©es
    async connect() {
        console.log(`\nüì¶‚Äã Connexion √† MongoDB (${this.config.database})...`);
        try {
            // cr√©ation du client
            this.client = new MongoClient(this.config.connectionString);
            await this.client.connect();
            // connexion √† la base de donn√©es
            this.db = this.client.db(this.config.database);
            console.log("‚úÖ‚Äã Serveur connect√© √† MongoDB !");
        } catch (err) {
            console.log("‚ùå‚Äã Erreur lors de la connexion √† MongoDB : ", err.message);
            throw err;
        }
    }

    // fonction pour se d√©connecter de la base de donn√©es
    async disconnect() {
        if (this.client) {
            await this.client.close();
            console.log("‚úÖ‚Äã Connexion MongoDB ferm√©e !");
        }
    }

    // fonction pour cr√©er et remplir les collections
    async createAndFillCollections() {
        console.log("\nüì¶‚Äã Cr√©ation et remplissage des collections MongoDB...");
        try {
            // suppression des collections existantes
            await this.deleteAllCollections();

            // remplissage de la collection logements_chauffages
            console.log("üì¶‚Äã Remplissage de la collection 'logements_chauffages'...");
            const chauffagesWithId = logementsChauffages.map(item => ({ _id: item.id, ...item }));
            await this.getCollection('logements_chauffages').insertMany(chauffagesWithId);

            // remplissage de la collection transports_categories
            console.log("üì¶‚Äã Remplissage de la collection 'transports_categories'...");
            const transportsWithId = transportsCategories.map(item => ({ _id: item.id, ...item }));
            await this.getCollection('transports_categories').insertMany(transportsWithId);

            // remplissage de la collection moyennes_fr
            console.log("üì¶‚Äã Remplissage de la collection 'moyennes_fr'...");
            const moyennesWithId = moyennesFr.map(item => ({ _id: item.id, ...item }));
            await this.getCollection('moyennes_fr').insertMany(moyennesWithId);

            // remplissage de la collection suggestions
            console.log("üì¶‚Äã Remplissage de la collection 'suggestions'...");
            const suggestionsWithId = suggestions.map(item => ({ _id: item.id, ...item }));
            await this.getCollection('suggestions').insertMany(suggestionsWithId);

            // cr√©ation d'une collection vide pour users_activities
            console.log("üì¶‚Äã Cr√©ation de la collection 'users_activities'...");
            const usersCollection = this.getCollection('users_activities');
            await usersCollection.insertOne({ _temp: true });
            await usersCollection.deleteOne({ _temp: true });

            console.log("‚úÖ‚Äã Collections MongoDB cr√©√©es et remplies avec succ√®s !");
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la cr√©ation et du remplissage des collections : ", error.message);
            throw error;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////
    // COLLECTIONS
    /////////////////////////////////////////////////////////////////////////////////////

    // fonction pour r√©cup√©rer une collection
    getCollection(collectionName) {
        if (!this.db) {
            throw new Error("Base de donn√©es non connect√©e");
        }
        return this.db.collection(collectionName);
    }

    // fonction pour supprimer toutes les collections
    async deleteAllCollections() {
        console.log("üóëÔ∏è‚Äã  Suppression des collections...");
        try {
            const collections = ['logements_chauffages', 'transports_categories', 'moyennes_fr', 'suggestions', 'users_activities'];
            for (const collectionName of collections) {
                await this.db.dropCollection(collectionName).catch(() => {
                    // ignore l'erreur si la collection n'existe pas
                });
            }
            console.log("‚úÖ‚Äã Collections supprim√©es avec succ√®s !");
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la suppression des collections : ", error.message);
            throw error;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////
    // SERVICES
    /////////////////////////////////////////////////////////////////////////////////////

    // Services pour les logements chauffages
    // GET - R√©cup√©ration de tous les chauffages
    async getAllChauffages() {
        try {
            const collection = this.getCollection('logements_chauffages');
            return await collection.find({}).toArray();
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des chauffages :", error.message);
            throw error;
        }
    }

    // Services pour les moyennes fr
    // GET - R√©cup√©ration de toutes les moyennes fr
    async getAllMoyennesFr() {
        try {
            const collection = this.getCollection('moyennes_fr');
            return await collection.find({}).toArray();
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des moyennes fr :", error.message);
            throw error;
        }
    }

    // Services pour les notifications
    // GET - R√©cup√©ration des activit√©s des utilisateurs
    async getUsersActivities() {
        try {
            const collection = this.getCollection('users_activities');
            return await collection.find({}).toArray();
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des activit√©s des utilisateurs :", error.message);
            throw error;
        }
    }
    // GET - R√©cup√©ration de l'activit√© d'un utilisateur
    async getUserActivity(userExpoToken) {
        try {
            const collection = this.getCollection('users_activities');
            return await collection.findOne({ _id: userExpoToken });
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de l'activit√© d'un utilisateur :", error.message);
            throw error;
        }
    }
    // POST - Cr√©ation de l'activit√© d'un utilisateur
    async createUserActivity(userExpoToken, lastActivityDate) {
        try {
            const collection = this.getCollection('users_activities');
            return await collection.insertOne({
                _id: userExpoToken,
                last_activity_date: lastActivityDate
            });
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la cr√©ation de l'activit√© d'un utilisateur :", error.message);
            throw error;
        }
    }
    // PUT - Mise √† jour de l'activit√© d'un utilisateur
    async updateUserActivity(userExpoToken, lastActivityDate) {
        try {
            const collection = this.getCollection('users_activities');
            return await collection.updateOne({ _id: userExpoToken }, { $set: { last_activity_date: lastActivityDate } });
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la mise √† jour de l'activit√© d'un utilisateur :", error.message);
            throw error;
        }
    }
    // DELETE - Suppression d'un utilisateur
    async deleteUser(userExpoToken) {
        try {
            const collection = this.getCollection('users_activities');
            return await collection.deleteOne({ _id: userExpoToken });
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la suppression d'un utilisateur :", error.message);
            throw error;
        }
    }

    // Services pour les suggestions
    // GET - R√©cup√©ration de toutes les suggestions
    async getAllSuggestions() {
        try {
            const collection = this.getCollection('suggestions');
            return await collection.find({}).toArray();
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des suggestions :", error.message);
            throw error;
        }
    }

    // Services pour les cat√©gories de transports
    // GET - R√©cup√©ration de toutes les cat√©gories de transports
    async getAllCategoriesTransports() {
        try {
            const collection = this.getCollection('transports_categories');
            return await collection.find({}).toArray();
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des cat√©gories de transports :", error.message);
            throw error;
        }
    }
    // GET - R√©cup√©ration d'une cat√©gorie de transport par son id
    async getTransportCategorieById(id) {
        try {
            const collection = this.getCollection('transports_categories');
            return await collection.findOne({ _id: parseInt(id) });
        } catch (error) {
            console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de la cat√©gorie de transport :", error.message);
            throw error;
        }
    }
}

export default MongoDB;
