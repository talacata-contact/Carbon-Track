/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { getdb } from '@/db/connectdb';
import { deletePassiveIterationsForPeriod } from '../evenementsService/actionsIterations';
import { getPassiveActionById, syncPassiveAction, updatePassiveAction } from '../evenementsService/actionsPassives';

////////////////////////////////////////////////////////////////////////////////////
// ABSENCES
////////////////////////////////////////////////////////////////////////////////////

// GET - R√©cup√©ration des absences
export const getAllAbsences = async () => {
    console.log("‚ö°‚Äã R√©cup√©ration des absences...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des absences
        const sql = 'SELECT * FROM utilisateur_absences';
        const absences = await db.getAllAsync(sql);

        // v√©rification des absences
        // console.log("üëâ‚Äã Absences :", absences);

        console.log("‚úÖ‚Äã Absences r√©cup√©r√©es avec succ√®s !");
        return absences;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des absences :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une absence par son id
export const getAbsenceById = async (absence_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une absence par son id...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de l'absence
        const sql = 'SELECT * FROM utilisateur_absences WHERE id = ?';
        const absence = await db.getFirstAsync(sql, [absence_id]);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Absence :", absence);

        console.log("‚úÖ‚Äã Absence r√©cup√©r√©e avec succ√®s !");
        return absence;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une absence par son id :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une absence par son action passive id
export const getAbsenceByActionPassiveId = async (action_passive_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une absence par son action passive id...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de l'absence
        const sql = 'SELECT * FROM utilisateur_absences WHERE action_passive_id = ?';
        const absence = await db.getFirstAsync(sql, [action_passive_id]);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Absence :", absence);

        console.log("‚úÖ‚Äã Absence r√©cup√©r√©e avec succ√®s !");
        return absence;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une absence par son action passive id :", error.message);
        throw error;
    }
}

// CREATE - Cr√©ation d'une absence
export const createAbsence = async (action_passive_id, date_debut, date_fin) => {
    console.log("‚ö°‚Äã Cr√©ation d'une absence...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // cr√©ation de l'absence
        const sql = 'INSERT INTO utilisateur_absences (date_debut, date_fin, action_passive_id) VALUES (?, ?, ?)';
        await db.runAsync(sql, [date_debut, date_fin, action_passive_id]);

        // v√©rification de la cr√©ation de l'absence
        const selectSql = 'SELECT * FROM utilisateur_absences ORDER BY id DESC LIMIT 1';
        const absence = await db.getFirstAsync(selectSql);
        // console.log("üëâ‚Äã Nouvelle absence :", absence);

        console.log("‚úÖ‚Äã Absence cr√©√©e avec succ√®s !");

        // synchronisation de l'absence
        await syncAbsence(absence, true);

        return { status: true, message: "Absence cr√©√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation de l'absence :", error.message);
        return { status: false, message: error.message };
    }
}

// DELETE - Suppression d'une absence
export const deleteAbsence = async (absence_id) => {
    console.log("‚ö°‚Äã Suppression d'une absence...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // v√©rification avant suppression
        const selectSql_before = 'SELECT * FROM utilisateur_absences WHERE id = ?';
        const absence_before = await db.getFirstAsync(selectSql_before, [absence_id]);
        // console.log("üëâ‚Äã Absence √† supprimer :", absence_before);

        // suppression de l'absence
        const sql = 'DELETE FROM utilisateur_absences WHERE id = ?';
        await db.runAsync(sql, [absence_id]);

        // v√©rification apr√®s suppression
        // const selectSql_after = 'SELECT * FROM utilisateur_absences WHERE id = ?';
        // const absence_after = await db.getFirstAsync(selectSql_after, [absence_id]);
        // console.log("üëâ‚Äã Absence supprim√©e :", absence_after);

        // r√©activation de l'action passive associ√©e
        await updatePassiveAction(absence_before.action_passive_id, { is_active: true });

        // synchronisation de l'action passive associ√©e
        const action_passive = await getPassiveActionById(absence_before.action_passive_id);
        await syncPassiveAction(action_passive, false);

        console.log("‚úÖ‚Äã Absence supprim√©e avec succ√®s !");
        return { status: true, message: "Absence supprim√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression de l'absence :", error.message);
        return { status: false, message: error.message };
    }
}

// SYNC - Synchronisation d'une absence
const syncAbsence = async (absence, absence_just_created) => {
    console.log("‚ö°‚Äã Synchronisation d'une absence...");
    try {
        // r√©cup√©ration des dates
        const now = new Date().toISOString().split('T')[0];
        const date_debut = new Date(absence.date_debut).toISOString().split('T')[0];
        const date_fin = new Date(absence.date_fin).toISOString().split('T')[0];

        // si l'absence est en cours : on supprime les it√©rations pr√©sentes pendant l'absence et on d√©sactive l'action passive associ√©e (is_active = false)
        if (date_debut <= now && now <= date_fin) {
            // suppression des it√©rations pr√©sentes pendant l'absence
            await deletePassiveIterationsForPeriod(absence.action_passive_id, date_debut, date_fin);

            // d√©sactivation de l'action passive associ√©e
            await updatePassiveAction(absence.action_passive_id, { is_active: false });
        }

        // si l'absence est finie (et vient d'√™tre cr√©√©e) : on supprime les it√©rations pr√©sentes pendant l'absence et on supprime l'absence directement
        if (now > date_fin && absence_just_created) {
            // suppression des it√©rations pr√©sentes pendant l'absence
            await deletePassiveIterationsForPeriod(absence.action_passive_id, date_debut, date_fin);

            // suppression de l'absence
            const response = await deleteAbsence(absence.id);
            if (!response.status) {
                throw new Error(response.message);
            }
        }

        // si l'absence est finie (et ne vient pas d'√™tre cr√©√©e): on supprime les it√©rations pr√©sentes pendant l'absence, on r√©active l'action passive associ√©e (is_active = true) avec une nouvelle date de d√©but (= date de fin de l'absence + 1 jour) et on supprime l'absence
        if (now > date_fin && !absence_just_created) {
            // suppression des it√©rations pr√©sentes pendant l'absence
            await deletePassiveIterationsForPeriod(absence.action_passive_id, date_debut, date_fin);

            // changement de la date de d√©but pour reprendre l'action passive au bon moment apr√®s la fin de l'absence
            const new_start_date = new Date(date_fin);
            new_start_date.setDate(new_start_date.getDate() + 1); // = jour suivant la fin de l'absence
            await updatePassiveAction(absence.action_passive_id, { date_debut: new_start_date.toISOString().split('T')[0], is_active: true });

            // resynchronisation de l'action passive associ√©e (avec true pour prendre en compte la nouvelle date de d√©but)
            const action_passive = await getPassiveActionById(absence.action_passive_id);
            await syncPassiveAction(action_passive, true);

            // suppression de l'absence
            const response_delete = await deleteAbsence(absence.id);
            if (!response_delete.status) {
                throw new Error(response_delete.message);
            }
        }

        console.log("‚úÖ‚Äã Absence synchronis√©e avec succ√®s !");

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la synchronisation de l'absence :", error.message);
        throw error;
    }
}

// SYNC - Synchronisation des absences
export const syncAbsences = async () => {
    console.log("‚ö°‚Äã Synchronisation des absences...");
    try {
        // r√©cup√©ration des absences
        const absences = await getAllAbsences();

        // synchronisation des absences
        for (const absence of absences) {
            // console.log("üëâ‚Äã Absence :", absence);
            await syncAbsence(absence, false);
        }

        console.log("‚úÖ‚Äã Absences synchronis√©es avec succ√®s !");
        return { status: true, message: "Absences synchronis√©es avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la synchronisation des absences :", error.message);
        return { status: false, message: error.message };
    }
}