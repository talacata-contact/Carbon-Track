/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { getdb } from '@/db/connectdb';
import { getPoidsCarboneAliment } from '../referencesService/aliments';
import { getLogementById, getPoidsCarboneLogement } from '../referencesService/logements';
import { getPoidsCarboneCreationTransport, getPoidsCarboneUsageTransport, getTransportById } from '../referencesService/transports';
import { getActionById, getActionByReferenceId } from './actions';
import { getReferenceByActionId } from './actionsReferences';
import { getActionUsuelleById } from './actionsUsuelles';

////////////////////////////////////////////////////////////////////////////////////
// ACTIONS ITERATIONS
////////////////////////////////////////////////////////////////////////////////////

// GET - R√©cup√©ration de toutes les it√©rations
export const getAllIterations = async () => {
    console.log("‚ö°‚Äã R√©cup√©ration de toutes les it√©rations...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des it√©rations
        const sql = 'SELECT * FROM actions_iterations ORDER BY id DESC';
        const iterations = await db.getAllAsync(sql);

        // v√©rification des it√©rations
        // console.log("üëâ‚Äã It√©rations :", iterations);

        // console.log("‚úÖ‚Äã It√©rations r√©cup√©r√©es avec succ√®s !");
        return iterations;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de toutes les it√©rations :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une it√©ration par son id
export const getIterationById = async (id) => {
    console.log("üîÑ R√©cup√©ration d'une it√©ration par son id...");
    try {
        const db = await getdb();

        const sql = `
            SELECT ai.*, a.categorie, a.type_action, a.logement_id, a.transport_id, a.aliment_code
            FROM actions_iterations ai
            JOIN actions a ON ai.action_id = a.id
            WHERE ai.id = ?
        `;
        const iteration = await db.getFirstAsync(sql, [id]);

        if (!iteration) {
            throw new Error(`Aucune it√©ration trouv√©e avec l'id ${id}`);
        }

        // Parser params JSON
        try {
            iteration.params = JSON.parse(iteration.params);
        } catch {
            console.warn("‚ö† Impossible de parser params, valeur brute conserv√©e.");
        }

        // D√©finir "reference_id" en fonction de la cat√©gorie
        switch (iteration.categorie) {
            case 'logement':
                iteration.reference_id = iteration.logement_id;
                break;
            case 'transport':
                iteration.reference_id = iteration.transport_id;
                break;
            case 'aliment':
                iteration.reference_id = iteration.aliment_code;
                break;
        }

        // console.log("üëâ It√©ration compl√®te :", iteration);
        return { status: true, message: "It√©ration r√©cup√©r√©e avec succ√®s !", iteration };
    } catch (error) {
        console.log("‚ùå Erreur lors de la r√©cup√©ration de l'it√©ration :", error.message);
        return { status: false, message: error.message };
    }
};

// GET - R√©cup√©ration de toutes les it√©rations d'une action
export const getAllIterationsByActionId = async (action_id) => {
    // console.log("‚ö°‚Äã R√©cup√©ration de toutes les it√©rations d'une action...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des it√©rations
        const sql = 'SELECT * FROM actions_iterations WHERE action_id = ? ORDER BY id DESC';
        const iterations = await db.getAllAsync(sql, [action_id]);

        // v√©rification des it√©rations
        // console.log("üëâ‚Äã It√©rations :", iterations);

        // console.log("‚úÖ‚Äã It√©rations r√©cup√©r√©es avec succ√®s !");
        return iterations;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de toutes les it√©rations d'une action :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration de toutes les it√©rations d'une action passive
export const getAllIterationsByActionPassiveId = async (action_passive_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration de toutes les it√©rations d'une action passive...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des it√©rations
        const sql = 'SELECT * FROM actions_iterations WHERE action_passive_id = ?';
        const iterations = await db.getAllAsync(sql, [action_passive_id]);

        // v√©rification des it√©rations
        //console.log("üëâ‚Äã It√©rations :", iterations);

        // console.log("‚úÖ‚Äã It√©rations r√©cup√©r√©es avec succ√®s !");
        return iterations;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de toutes les it√©rations d'une action passive :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration des it√©rations passives par l'id d'une action et d'une action passive
export const getIterationsPassivesByActionIdAndActionPassiveId = async (action_id, action_passive_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration des it√©rations passives par l'id d'une action et d'une action passive...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des it√©rations
        const sql = 'SELECT * FROM actions_iterations WHERE action_id = ? AND action_passive_id = ?';
        const iterations_passives = await db.getAllAsync(sql, [action_id, action_passive_id]);

        // v√©rification des it√©rations
        // console.log("üëâ‚Äã It√©rations passives :", iterations_passives);

        console.log("‚úÖ‚Äã It√©rations passives r√©cup√©r√©es avec succ√®s !");
        return iterations_passives;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des it√©rations passives par l'id d'une action et d'une action passive :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration des it√©rations passives d'une p√©riode donn√©e
export const getPassiveIterationsForPeriod = async (action_passive_id, date_debut, date_fin) => {
    console.log("‚ö°‚Äã R√©cup√©ration des it√©rations passives d'une p√©riode donn√©e...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des it√©rations passives
        const sql = 'SELECT * FROM actions_iterations WHERE action_passive_id = ? AND date >= ? AND date <= ?';
        const iterations_passives = await db.getAllAsync(sql, [action_passive_id, date_debut, date_fin]);

        // v√©rification des it√©rations
        // console.log("üëâ‚Äã It√©rations passives :", iterations_passives);

        console.log("‚úÖ‚Äã It√©rations passives r√©cup√©r√©es avec succ√®s !");
        return iterations_passives;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des it√©rations passives d'une p√©riode donn√©e :", error.message);
        throw error;
    }
}

// CREATE - Cr√©ation d'une it√©ration
export const createIteration = async (action_id, action_passive_id, reference_id, params, date) => {
    console.log("‚ö°‚Äã Cr√©ation d'une it√©ration...");
    try {
        // r√©cup√©ration de l'action associ√©e
        const action = await getActionById(action_id);

        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // üëâ V√©rification si une it√©ration existe d√©j√† (uniquement pour logement)
        if (action.categorie === 'logement') {
            const checkSql = `SELECT * 
                              FROM actions_iterations 
                              WHERE action_id = ? AND date = ? 
                              LIMIT 1`;
            const existing = await db.getFirstAsync(checkSql, [action_id, date]);
            if (existing) {
                console.log("Une it√©ration existe d√©j√† pour ce logement et cette date :", existing);
                return existing;
            }
        }

        // r√©cup√©ration des param√®tres pour l'it√©ration
        const params_iteration = await getParamsIteration(action.categorie, reference_id, params);

        // calcul du poids carbone
        const co2 = await getPoidsCarboneIteration(action.type_action, action.categorie, reference_id, params_iteration);

        // cr√©ation de l'it√©ration
        const sql = 'INSERT INTO actions_iterations (action_id, action_passive_id, params, co2, date) VALUES (?, ?, ?, ?, ?)';
        await db.runAsync(sql, [action_id, action_passive_id, JSON.stringify(params_iteration), co2, date]);

        // v√©rification de la cr√©ation
        // const selectSql = 'SELECT * FROM actions_iterations ORDER BY id DESC LIMIT 1';
        // const iteration = await db.getFirstAsync(selectSql);
        // console.log("üëâ‚Äã Nouvelle it√©ration :", iteration);

        console.log("‚úÖ‚Äã It√©ration cr√©√©e avec succ√®s !");

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation d'une it√©ration :", error.message);
        throw error;
    }
};

// CREATE - Cr√©ation d'une it√©ration pour une action usuelle
export const createIterationForActionUsuelle = async (action_usuelle_id, date) => {
    console.log("‚ö°‚Äã Cr√©ation d'une it√©ration pour une action usuelle...");
    try {
        // r√©cup√©ration de l'action usuelle
        const action_usuelle = await getActionUsuelleById(action_usuelle_id);
        // r√©cup√©ration de l'action associ√©e
        const action = await getActionById(action_usuelle.action_id);
        // r√©cup√©ration de l'id de la r√©f√©rence
        const reference = await getReferenceByActionId(action.id);

        // cr√©ation de l'it√©ration
        // (si aliment, double it√©ration cr√©ation et usage)
        if (action.categorie === 'aliment') {
            const action_creation_aliment = await getActionByReferenceId('creation', action.categorie, reference.code);
            const action_usage_aliment = await getActionByReferenceId('usage', action.categorie, reference.code);
            await createIteration(action_creation_aliment.id, null, reference.code, action_usuelle.params, date);
            await createIteration(action_usage_aliment.id, null, reference.code, action_usuelle.params, date);
        } else {
            const action_passive_id = null; // pas d'action passive pour une action usuelle
            await createIteration(action.id, action_passive_id, reference.id, action_usuelle.params, date);
        }

        console.log("‚úÖ‚Äã It√©ration de l'action usuelle cr√©√©e avec succ√®s !");
        return { status: true, message: "It√©ration de l'action usuelle cr√©√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation d'une it√©ration pour une action usuelle :", error.message);
        return { status: false, message: error.message };
    }
}

// UPDATE - Modification d'une it√©ration
export const updateIteration = async (iteration_id, type_action, action_categorie, reference_id, params, date) => {
    console.log("‚ö°‚Äã Modification d'une it√©ration...");
    try {
        // r√©cup√©ration des param√®tres pour l'it√©ration
        const params_iteration = await getParamsIteration(action_categorie, reference_id, params);
        // calcul du nouveau poids carbone
        const co2 = await getPoidsCarboneIteration(type_action, action_categorie, reference_id, params_iteration);

        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // modification de l'it√©ration
        const sql = 'UPDATE actions_iterations SET params = ?, co2 = ?, date = ? WHERE id = ?';
        await db.runAsync(sql, [JSON.stringify(params_iteration), co2, date, iteration_id]);

        // v√©rification de la modification
        // const selectSql = 'SELECT * FROM actions_iterations WHERE id = ?';
        // const iteration = await db.getFirstAsync(selectSql, [iteration_id]);
        // console.log("üëâ‚Äã It√©ration modifi√©e :", iteration);

        console.log("‚úÖ‚Äã It√©ration modifi√©e avec succ√®s !");
        return { status: true, message: "It√©ration modifi√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la modification d'une it√©ration :", error.message);
        return { status: false, message: error.message };
    }
}

// DELETE - Suppression d'une it√©ration
export const deleteIteration = async (iteration_id) => {
    console.log("‚ö°‚Äã Suppression d'une it√©ration...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // v√©rification avant suppression
        // const selectSql_before = 'SELECT * FROM actions_iterations WHERE id = ?';
        // const iteration_before = await db.getFirstAsync(selectSql_before, [iteration_id]);
        // console.log("üëâ‚Äã It√©ration √† supprimer :", iteration_before);

        // suppression de l'it√©ration
        const sql = 'DELETE FROM actions_iterations WHERE id = ?';
        await db.runAsync(sql, [iteration_id]);

        // v√©rification apr√®s suppression
        // const selectSql_after = 'SELECT * FROM actions_iterations WHERE id = ?';
        // const iteration_after = await db.getFirstAsync(selectSql_after, [iteration_id]);
        // console.log("üëâ‚Äã It√©ration supprim√©e :", iteration_after);

        console.log("‚úÖ‚Äã It√©ration supprim√©e avec succ√®s !");
        return { status: true, message: "It√©ration supprim√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression d'une it√©ration :", error.message);
        return { status: false, message: error.message };
    }
}

// DELETE - Suppression des it√©rations passives d'une p√©riode donn√©e
export const deletePassiveIterationsForPeriod = async (action_passive_id, date_debut, date_fin) => {
    console.log("‚ö°‚Äã Suppression des it√©rations passives d'une p√©riode donn√©e...");
    try {
        // r√©cup√©ration des it√©rations passives de la p√©riode donn√©e
        const iterations_passives = await getPassiveIterationsForPeriod(action_passive_id, date_debut, date_fin);

        // suppression des it√©rations passives
        for (const iteration_passive of iterations_passives) {
            const response = await deleteIteration(iteration_passive.id);
            if (!response.status) {
                throw new Error(response.message);
            }
        }

        // v√©rification de la suppression
        // await getPassiveIterationsForPeriod(action_passive_id, date_debut, date_fin);

        console.log("‚úÖ‚Äã It√©rations passives supprim√©es avec succ√®s !");

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression des it√©rations passives d'une p√©riode donn√©e :", error.message);
        throw error;
    }
}

// DELETE - Suppression des it√©rations d'une action passive
export const deleteIterationsByActionPassiveId = async (action_passive_id) => {
    console.log("‚ö°‚Äã Suppression des it√©rations d'une action passive...");
    try {
        // r√©cup√©ration des it√©rations d'une action passive
        const iterations = await getAllIterationsByActionPassiveId(action_passive_id);

        // suppression des it√©rations
        for (const iteration of iterations) {
            const response = await deleteIteration(iteration.id);
            if (!response.status) {
                throw new Error(response.message);
            }
        }

        console.log("‚úÖ‚Äã It√©rations supprim√©es avec succ√®s !");
        return { status: true, message: "It√©rations supprim√©es avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression des it√©rations d'une action passive :", error.message);
        return { status: false, message: error.message };
    }
}

// FONCTION UTILITAIRE - R√©cup√©ration des param√®tres pour cr√©er ou modifier une it√©ration
export const getParamsIteration = async (categorie, reference_id, params) => {
    console.log("‚ö°‚Äã R√©cup√©ration des param√®tres pour une it√©ration...");
    try {
        // conversion en objet avant r√©cup√©ration des param√®tres (si besoin)
        if (typeof params === 'string') {
            params = JSON.parse(params);
        }

        let params_iteration;
        if (categorie === 'logement') {
            // si le param√®tre temp_chauffage n'a pas √©t√© chang√©, on r√©cup√®re la temp√©rature de base du logement
            if (!params.temp_chauffage) {
                const response = await getLogementById(reference_id);
                if (response.status) {
                    params.temp_chauffage = response.logement.temp_chauffage || 20;
                } else {
                    throw new Error(response.message);
                }
            }
            // cr√©ation des param√®tres pour l'it√©ration
            params_iteration = {
                temp_chauffage: params.temp_chauffage
            };

        } else if (categorie === 'transport') {
            // si le param√®tre conso_km n'a pas √©t√© chang√©, on r√©cup√®re la consommation de base du transport
            if (!params.conso_km) {
                const response = await getTransportById(reference_id);
                if (response.status) {
                    params.conso_km = response.transport.conso_km || 0;
                } else {
                    throw new Error(response.message);
                }
            }
            // cr√©ation des param√®tres pour l'it√©ration
            params_iteration = {
                conso_km: params.conso_km,
                distance_km: params.distance_km
            };
        }

        else if (categorie === 'aliment') {
            // cr√©ation des param√®tres pour l'it√©ration
            params_iteration = {
                quantity_value: params.quantity_value,
                quantity_unit: params.quantity_unit,
                code: params.code,
                product_name: params.product_name,
                marques: params.marques,
                tags: params.tags || []
            };
        }

        // v√©rification des param√®tres
        // console.log("üëâ‚Äã Param√®tres pour l'it√©ration :", params_iteration);

        console.log("‚úÖ‚Äã Param√®tres pour une it√©ration r√©cup√©r√©s avec succ√®s !");
        return params_iteration;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des param√®tres pour une it√©ration :", error.message);
        throw error;
    }
}

// FONCTION UTILITAIRE - R√©cup√©ration des param√®tres d'une it√©ration par son id
export const getParamsIterationById = async (iteration_id) => {
    console.log(`‚ö° R√©cup√©ration des param√®tres pour l'it√©ration ${iteration_id}...`);
    try {
        const { status, message, iteration } = await getIterationById(iteration_id);
        // console.log("hhhhhhhüëâ‚Äã It√©ration r√©cup√©r√©e :", iteration);
        if (!status) throw new Error(message);

        // Appel direct √† ta fonction existante pour g√©n√©rer les params finaux
        return await getParamsIteration(
            iteration.categorie,
            iteration.reference_id,
            iteration.params
        );

    } catch (error) {
        console.log(`‚ùå Erreur lors de la r√©cup√©ration des param√®tres de l'it√©ration ${iteration_id} :`, error.message);
        throw error;
    }
};

// FONCTION UTILITAIRE - Affichage des param√®tres pour une it√©ration
export const printParamsIteration = (type_action, categorie, reference, params) => {
    // console.log("‚ö°‚Äã Affichage des param√®tres pour une it√©ration...");

    // conversion en objet avant r√©cup√©ration des param√®tres (si besoin)
    if (typeof params === 'string') {
        params = JSON.parse(params);
    }

    // r√©cup√©ration des param√®tres pour une it√©ration
    let params_iteration;
    if (categorie === 'logement') {
        params_iteration = {
            temp_chauffage: params.temp_chauffage || reference.temp_chauffage,
            co2_unit: 'kgCO2eq'
        };

    } else if (categorie === 'transport') {
        params_iteration = {
            conso_km: params.conso_km || reference.conso_km,
            distance_km: params.distance_km,
            co2_unit: 'kgCO2eq'
        };

    } else if (categorie === 'aliment') {
        params_iteration = {
            quantity_value: params.quantity_value,
            quantity_unit: params.quantity_unit,
            co2_unit: type_action === 'creation' ? 'kgCO2eq' : 'gCO2eq'
        };
    }

    // v√©rification des param√®tres
    // console.log("üëâ‚Äã Param√®tres :", params_iteration);

    // console.log("‚úÖ‚Äã Param√®tres affich√©s avec succ√®s !");
    return params_iteration;
}

// FONCTION UTILITAIRE - Calcul du poids carbone d'une it√©ration
const getPoidsCarboneIteration = async (type_action, categorie, reference_id, params) => {
    console.log("‚ö°‚Äã Calcul du poids carbone d'une it√©ration...");
    try {
        let co2;
        if (type_action === 'creation') {
            // r√©cup√©ration du poids carbone de la cr√©ation
            if (categorie === 'transport') {
                co2 = await getPoidsCarboneCreationTransport(reference_id);
            } else if (categorie === 'logement') {
                co2 = null;
            } else if (categorie === 'aliment') {
                co2 = await getPoidsCarboneAliment(type_action, reference_id, params.quantity_value, params.quantity_unit);
            }

        } else if (type_action === 'usage') {
            // r√©cup√©ration du poids carbone de l'usage
            if (categorie === 'transport') {
                co2 = await getPoidsCarboneUsageTransport(reference_id, params.distance_km);
            } else if (categorie === 'logement') {
                co2 = await getPoidsCarboneLogement(reference_id);
            } else if (categorie === 'aliment') {
                co2 = await getPoidsCarboneAliment(type_action, reference_id, params.quantity_value, params.quantity_unit);
            }
        }

        // v√©rification du r√©sultat
        // console.log("üëâ‚Äã Poids carbone de l'it√©ration :", co2);

        console.log("‚úÖ‚Äã Poids carbone de l'it√©ration calcul√© avec succ√®s !");
        return co2;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors du calcul du poids carbone d'une it√©ration :", error.message);
        throw error;
    }
}