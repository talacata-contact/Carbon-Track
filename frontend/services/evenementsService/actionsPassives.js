/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { getdb } from '@/db/connectdb';
import { getActionById, getActionByReferenceId } from './actions';
import { createIteration, getIterationsPassivesByActionIdAndActionPassiveId } from './actionsIterations';
import { getReferenceByActionId } from './actionsReferences';

////////////////////////////////////////////////////////////////////////////////////
// ACTIONS PASSIVES
////////////////////////////////////////////////////////////////////////////////////

// GET - R√©cup√©ration des actions passives
export const getAllPassiveActions = async () => {
    console.log("‚ö°‚Äã R√©cup√©ration des actions passives...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des actions passives
        const sql = 'SELECT * FROM actions_passives ORDER BY id DESC';
        const actions_passives = await db.getAllAsync(sql);

        // v√©rification des actions passives
        // console.log("üëâ‚Äã Actions passives :", actions_passives.id, actions_passives);

        console.log("‚úÖ‚Äã Actions passives r√©cup√©r√©es avec succ√®s !");
        return actions_passives;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des actions passives :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration de toutes les actions passives d'une action
export const getAllPassiveActionsByActionId = async (action_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration de toutes les actions passives d'une action...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des actions passives
        const sql = 'SELECT * FROM actions_passives WHERE action_id = ?';
        const actions_passives = await db.getAllAsync(sql, [action_id]);

        // v√©rification des actions passives
        // console.log("üëâ‚Äã Actions passives :", actions_passives);

        console.log("‚úÖ‚Äã Actions passives r√©cup√©r√©es avec succ√®s !");
        return actions_passives;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration de toutes les actions passives d'une action :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une action passive par son id
export const getPassiveActionById = async (action_passive_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une action passive par son id", action_passive_id, "...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de l'action passive
        const sql = 'SELECT * FROM actions_passives WHERE id = ?';
        const action_passive = await db.getFirstAsync(sql, [action_passive_id]);

        // v√©rification de l'action passive
        // console.log("üëâ‚Äã Action passive :", action_passive);

        // console.log("‚úÖ‚Äã Action passive r√©cup√©r√©e avec succ√®s !");
        return action_passive;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une action passive par son id :", error.message);
        throw error;
    }
}

// CREATE - Cr√©ation d'une action passive
export const createPassiveAction = async (action_id, params, repeat_every, repeat_unit, date_debut, date_fin = null) => {
    console.log("‚ö°‚Äã Cr√©ation d'une action passive...");
    try {
        // r√©cup√©ration de l'action
        const action = await getActionById(action_id);

        // r√©cup√©ration des param√®tres pour l'action passive
        const params_action_passive = await getParamsActionPassive(action.categorie, params);

        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // ‚ö†Ô∏è V√©rification des dates
        // console.log("üìÖ Donn√©es dates envoy√©es :", { date_debut, date_fin });

        if (!date_debut) {
            throw new Error("date_debut est vide ou null !");
        }

        // cr√©ation de l'action passive
        const is_active = true; // par d√©faut, l'action passive est activ√©e
        const sql = `
        INSERT INTO actions_passives 
            (action_id, params, is_active, repeat_every, repeat_unit, date_debut, date_fin) 
        VALUES (?, ?, ?, ?, ?, ?, ?)
        `;

        const repeatEveryValue = repeat_every ?? 1; // 1 par d√©faut si undefined ou null
        const repeatUnitValue = repeat_unit ?? 'jours'; // 'jours' par d√©faut si undefined ou null

        if (date_fin == null) {
            const dateObj = new Date(date_debut);
            dateObj.setFullYear(dateObj.getFullYear() + 3);
            date_fin = dateObj.toISOString();
        }



        await db.runAsync(sql, [
            action_id,
            JSON.stringify(params_action_passive),
            is_active,
            repeatEveryValue,
            repeatUnitValue,
            date_debut,
            date_fin
        ]);

        // v√©rification de la cr√©ation
        // const selectSql = 'SELECT * FROM actions_passives ORDER BY id DESC LIMIT 1';
        // const action_passive = await db.getFirstAsync(selectSql);
        // console.log("üëâ‚Äã Nouvelle action passive :", action_passive);

        console.log("‚úÖ‚Äã Action passive cr√©√©e avec succ√®s !");
        const response = await syncPassiveActions(); // synchronisation des actions passives
        if (!response.status) {
            throw new Error(response.message);
        }

        return { status: true, message: "Action passive cr√©√©e avec succ√®s !" };
    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation d'une action passive :", error.message);
        return { status: false, message: error.message };
    }
}

// UPDATE - Modification d'une action passive
export const updatePassiveAction = async (action_passive_id, updates) => {
    console.log("‚ö°‚Äã Modification d'une action passive...");
    try {
        // v√©rification des modifications
        if (Object.keys(updates).length === 0) {
            throw new Error("‚ùå‚Äã Aucune modification apport√©e √† l'action passive");
        }

        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // modification de l'action passive
        const fields = Object.keys(updates);
        const values = Object.values(updates).map((val, i) => {
            // si le champ est 'params', on le stringifie en JSON
            return fields[i] === "params" ? JSON.stringify(val) : val;
        });
        const setClause = fields.map((field, index) => `${field} = ?`).join(", ");

        // requ√™te sql
        const sql = `UPDATE actions_passives SET ${setClause} WHERE id = ?`;
        await db.runAsync(sql, [...values, action_passive_id]);

        // v√©rification de la modification
        // const selectSql = 'SELECT * FROM actions_passives WHERE id = ?';
        // const action_passive = await db.getFirstAsync(selectSql, [action_passive_id]);
        // console.log("üëâ‚Äã Action passive modifi√©e :", action_passive);

        console.log("‚úÖ‚Äã Action passive modifi√©e avec succ√®s !");

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la modification d'une action passive :", error.message);
        throw error;
    }
}

// DELETE - Suppression d'une action passive
export const deletePassiveAction = async (action_passive_id) => {
    console.log("‚ö°‚Äã Suppression d'une action passive...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // v√©rification avant suppression
        // const selectSql_before = 'SELECT * FROM actions_passives WHERE id = ?';
        // const action_passive_before = await db.getFirstAsync(selectSql_before, [action_passive_id]);
        // console.log("üëâ‚Äã Action passive √† supprimer :", action_passive_before);

        // suppression de l'action passive
        const sql = 'DELETE FROM actions_passives WHERE id = ?';
        await db.runAsync(sql, [action_passive_id]);

        // v√©rification apr√®s suppression
        // const selectSql_after = 'SELECT * FROM actions_passives WHERE id = ?';
        // const action_passive_after = await db.getFirstAsync(selectSql_after, [action_passive_id]);
        // console.log("üëâ‚Äã Action passive supprim√©e :", action_passive_after);

        console.log("‚úÖ‚Äã Action passive supprim√©e avec succ√®s !");
        return { status: true, message: "Action passive supprim√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression d'une action passive :", error.message);
        return { status: false, message: error.message };
    }
}

// SYNC - Synchronisation d'une action passive
export const syncPassiveAction = async (action_passive, absence_just_finished) => {
    console.log("‚ö°‚Äã Synchronisation d'une action passive...");
    try {
        // si l'action passive est active
        if (action_passive.is_active) {
            // r√©cup√©ration des dates
            const now = new Date().toISOString().split('T')[0];
            const date_debut = new Date(action_passive.date_debut).toISOString().split('T')[0];
            let date_fin = null;
            if (action_passive.date_fin) {
                date_fin = new Date(action_passive.date_fin).toISOString().split('T')[0];
            }

            // r√©cup√©ration des √©l√©ments associ√©s √† l'action passive
            const action = await getActionById(action_passive.action_id);
            const reference = await getReferenceByActionId(action.id);
            const iterations_passives = await getIterationsPassivesByActionIdAndActionPassiveId(action.id, action_passive.id);

            // r√©cup√©ration de l'it√©ration passive la plus r√©cente
            let nextIterationDate;

            // cas d'une premi√®re it√©ration passive : on utilise la date de d√©but de l'action passive
            if (iterations_passives.length === 0) {
                nextIterationDate = date_debut;
                // console.log("üëâ Aucune it√©ration passive. Date de d√©part utilis√©e :", nextIterationDate);
            }

            // cas d'une it√©ration passive existante : on r√©cup√®re la date de la prochaine it√©ration passive
            else {
                // r√©cup√©ration de l'it√©ration passive la plus r√©cente
                const most_recent_passive_iteration = getMostRecentPassiveIteration(iterations_passives);

                // r√©cup√©ration de la date de la prochaine it√©ration passive
                nextIterationDate = getNextPassiveIterationDate(most_recent_passive_iteration.date, action_passive.repeat_every, action_passive.repeat_unit);

                // si l'absence vient de finir, on r√©cup√®re la 1√®re it√©ration qui devait commencer apr√®s la date de fin de l'absence (= nouvelle date de d√©but de l'action passive)
                if (absence_just_finished) {
                    while (nextIterationDate < date_debut) {
                        nextIterationDate = getNextPassiveIterationDate(nextIterationDate, action_passive.repeat_every, action_passive.repeat_unit);
                    }
                }
            }

            // cr√©ation des it√©rations (tant que la date de la prochaine it√©ration passive est inf√©rieure ou √©gale √† aujourd'hui et √† la date de fin)
            while (nextIterationDate <= now && nextIterationDate <= date_fin) {
                // (si aliment, cr√©ation d'une double it√©ration : cr√©ation et usage)
                if (action.categorie === 'aliment') {
                    // r√©cup√©ration des actions 'creation' et 'usage' associ√©es
                    const action_creation_aliment = await getActionByReferenceId('creation', action.categorie, reference.code);
                    const action_usage_aliment = await getActionByReferenceId('usage', action.categorie, reference.code);

                    // cr√©ation des it√©rations 'creation' et 'usage'
                    await createIteration(action_creation_aliment.id, action_passive.id, reference.code, action_passive.params, nextIterationDate);
                    await createIteration(action_usage_aliment.id, action_passive.id, reference.code, action_passive.params, nextIterationDate);
                }
                // cr√©ation d'une it√©ration
                else {
                    await createIteration(action.id, action_passive.id, reference.id, action_passive.params, nextIterationDate);
                }
                // (si la synchro ne se faite pas depuis plusieurs jours, on peut avoir plusieurs it√©rations passives √† cr√©er)
                nextIterationDate = getNextPassiveIterationDate(nextIterationDate, action_passive.repeat_every, action_passive.repeat_unit);
            }

            // si l'action passive est termin√©e : on la supprime
            if (now > date_fin && date_fin !== null) {
                const response = await deletePassiveAction(action_passive.id);
                if (!response.status) {
                    throw new Error(response.message);
                }
            }
        }

        console.log("‚úÖ‚Äã Action passive synchronis√©e avec succ√®s !");

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la synchronisation d'une action passive :", error.message);
        throw error;
    }
}

// SYNC - Synchronisation des actions passives
export const syncPassiveActions = async () => {
    console.log("‚ö°‚Äã Synchronisation des actions passives...");
    try {
        // r√©cup√©ration des actions passives
        const actions_passives = await getAllPassiveActions();

        // synchronisation des actions passives
        for (const action_passive of actions_passives) {
            // console.log("üëâ‚Äã Action passive :", action_passive);
            await syncPassiveAction(action_passive, false);
        }

        console.log("‚úÖ‚Äã Actions passives synchronis√©es avec succ√®s !");
        return { status: true, message: "Actions passives synchronis√©es avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la synchronisation des actions passives :", error.message);
        return { status: false, message: error.message };
    }
}

// FONCTION UTILITAIRE - R√©cup√©ration des param√®tres pour l'action passive
const getParamsActionPassive = async (categorie, params) => {
    console.log("‚ö°‚Äã R√©cup√©ration des param√®tres pour l'action passive...");
    try {
        let params_action_passive;
        if (categorie === 'logement') {
            params_action_passive = {
                temp_chauffage: params.temp_chauffage
            };
        }
        else if (categorie === 'transport') {
            params_action_passive = {
                distance_km: params.distance_km
            };
        }
        else if (categorie === 'aliment') {
            params_action_passive = {
                quantity_value: params.quantity_value,
                quantity_unit: params.quantity_unit
            };
        }

        // v√©rification du r√©sultat
        // console.log("üëâ‚Äã Param√®tres pour l'action passive :", params_action_passive);

        console.log("‚úÖ‚Äã Param√®tres pour l'action passive r√©cup√©r√©s avec succ√®s !");
        return params_action_passive;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des param√®tres pour l'action passive :", error.message);
        throw error;
    }
}

// FONCTION UTILITAIRE - R√©cup√©ration de l'it√©ration la plus r√©cente
const getMostRecentPassiveIteration = (iterations_passives) => {
    console.log("‚ö°‚Äã R√©cup√©ration de l'it√©ration la plus r√©cente...");
    const now = new Date();
    const most_recent_iteration = iterations_passives
        .filter(iteration => new Date(iteration.date) <= now) // exclut les it√©rations futures
        .sort((a, b) => new Date(b.date) - new Date(a.date))[0]; // tri pour r√©cup√©rer la plus r√©cente

    // v√©rification du r√©sultat
    // console.log("üëâ‚Äã It√©ration la plus r√©cente :", most_recent_iteration);

    console.log("‚úÖ‚Äã It√©ration la plus r√©cente r√©cup√©r√©e avec succ√®s !");
    return most_recent_iteration;
}

// FONCTION UTILITAIRE - Calcul de la date de la prochaine it√©ration passive
const getNextPassiveIterationDate = (most_recent_passive_iteration_date, repeat_every, repeat_unit) => {
    console.log("‚ö°‚Äã Calcul de la date de la prochaine it√©ration passive...");

    const nextIterationDate = new Date(most_recent_passive_iteration_date);

    // calcul de la date de la prochaine it√©ration passive
    if (repeat_unit === 'jours') {
        nextIterationDate.setDate(nextIterationDate.getDate() + repeat_every);
    } else if (repeat_unit === 'semaines') {
        nextIterationDate.setDate(nextIterationDate.getDate() + repeat_every * 7);
    } else if (repeat_unit === 'mois') {
        nextIterationDate.setMonth(nextIterationDate.getMonth() + repeat_every);
    } else if (repeat_unit === 'ann√©es') {
        nextIterationDate.setFullYear(nextIterationDate.getFullYear() + repeat_every);
    }

    // v√©rification du r√©sultat
    // console.log("üëâ‚Äã Date de la prochaine it√©ration passive :", nextIterationDate);

    console.log("‚úÖ‚Äã Date de la prochaine it√©ration passive calcul√©e avec succ√®s !");
    return nextIterationDate.toISOString().split('T')[0];
}