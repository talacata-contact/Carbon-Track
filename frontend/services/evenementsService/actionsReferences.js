/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { getdb } from '@/db/connectdb';
import { updateAction } from '@/services/evenementsService/actions';
import { createAliment, deleteAliment, getAlimentByCode } from '../referencesService/aliments';
import { createLogement, deleteLogement, getLogementById, updateLogement } from '../referencesService/logements';
import { createTransport, deleteTransport, getTransportById, updateTransport } from '../referencesService/transports';
import { getActionById, getActionByReferenceId } from './actions';
import { getAllIterationsByActionId, updateIteration } from './actionsIterations';

////////////////////////////////////////////////////////////////////////////////////
// ACTIONS R√âF√âRENCES
////////////////////////////////////////////////////////////////////////////////////

// GET - R√©cup√©ration d'une r√©f√©rence par l'id d'une action
export const getReferenceByActionId = async (action_id) => {
    // console.log("‚ö°‚Äã R√©cup√©ration d'une r√©f√©rence par l'id d'une action...");
    try {
        // r√©cup√©ration de l'action
        const action = await getActionById(action_id);

        // r√©cup√©ration de la r√©f√©rence
        let reference;
        if (action.categorie === 'logement') {
            const response = await getLogementById(action.logement_id);
            if (response.status) {
                reference = response.logement;
            } else {
                throw new Error(response.message);
            }
        } else if (action.categorie === 'transport') {
            const response = await getTransportById(action.transport_id);
            if (response.status) {
                reference = response.transport;
            } else {
                throw new Error(response.message);
            }
        } else if (action.categorie === 'aliment') {
            reference = await getAlimentByCode(action.aliment_code);
        }

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã R√©f√©rence :", reference);

        // console.log("‚úÖ‚Äã R√©f√©rence r√©cup√©r√©e avec succ√®s !");
        return reference;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une r√©f√©rence par l'id d'une action :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une r√©f√©rence √† partir d'une action
export const getReferenceByAction = async (action) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une r√©f√©rence √† partir d'une action...");
    try {
        if (!action) {
            throw new Error("Action non fournie en param√®tre !");
        }
        // console.log("üëâ‚Äã Action :", action, '  action ID :', action.id);

        // r√©cup√©ration de la r√©f√©rence selon la cat√©gorie
        let reference;
        if (action.categorie === 'logement') {
            const response = await getLogementById(action.logement_id);
            if (response.status) {
                reference = response.logement;
            } else {
                throw new Error(response.message);
            }
        } else if (action.categorie === 'transport') {
            const response = await getTransportById(action.transport_id);
            if (response.status) {
                reference = response.transport;
            } else {
                throw new Error(response.message);
            }
        } else if (action.categorie === 'aliment') {
            reference = await getAlimentByCode(action.aliment_code);
        }

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã R√©f√©rence :", reference);

        // console.log("‚úÖ‚Äã R√©f√©rence r√©cup√©r√©e avec succ√®s !");
        return reference;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une r√©f√©rence √† partir d'une action :", error.message);
        throw error;
    }
};

// GET - R√©cup√©ration d'une r√©f√©rence par l'id
export const getReferenceById = async (categorie, reference_id) => {
    // console.log("‚ö°‚Äã R√©cup√©ration d'une r√©f√©rence par l'id...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de la r√©f√©rence
        let sql;
        if (categorie === 'logement') {
            sql = 'SELECT * FROM logements WHERE id = ?';
        } else if (categorie === 'transport') {
            sql = 'SELECT * FROM transports WHERE id = ?';
        } else if (categorie === 'aliment') {
            sql = 'SELECT * FROM aliments WHERE code = ?';
        }
        const reference = await db.getFirstAsync(sql, [reference_id]);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã R√©f√©rence :", reference);

        // console.log("‚úÖ‚Äã R√©f√©rence r√©cup√©r√©e avec succ√®s !");
        return reference;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une r√©f√©rence par l'id :", error.message);
        throw error;
    }
}

// CREATE - Cr√©ation d'une r√©f√©rence
export const createReference = async (categorie, type_action, params) => {
    console.log("‚ö°‚Äã Cr√©ation d'une r√©f√©rence...");
    try {
        let reference;

        // r√©cup√©ration du is_favori
        const is_favori = getIsFavori(type_action);

        if (categorie === 'logement') {
            reference = await createLogement(params.nom, params.chauffage_id, params.superficie_m2, params.temp_chauffage, is_favori);

        } else if (categorie === 'transport') {
            reference = await createTransport(params.nom, params.categorie_id, params.conso_km, is_favori);

        } else if (categorie === 'aliment') {
            reference = await createAliment(params.code, params.product_name, params.marques, params.tags, false);
        }

        // v√©rification de la cr√©ation
        // console.log("üëâ‚Äã R√©f√©rence cr√©√©e :", reference);

        console.log("‚úÖ‚Äã R√©f√©rence cr√©√©e avec succ√®s !");
        return reference;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation de la r√©f√©rence :", error.message);
        throw error;
    }
}

// UPDATE - Modification d'une r√©f√©rence (logement ou transport)
export const updateReference = async (categorie, reference_id, params, date_creation, is_favori) => {
    console.log("‚ö° Modification d'une r√©f√©rence...");
    try {
        // 1Ô∏è‚É£ Modification de la r√©f√©rence
        if (categorie === 'logement') {
            await updateLogement(reference_id, params);
        } else if (categorie === 'transport') {
            await updateTransport(reference_id, params);
        }
        console.log(`‚úÖ R√©f√©rence ${categorie} mise √† jour`);

        // 2Ô∏è‚É£ Mise √† jour du nom des actions creation si la r√©f√©rence est dans les favoris
        if (is_favori) {
            const action_creation = await getActionByReferenceId('creation', categorie, reference_id);
            if (action_creation) {
                // Mettre √† jour l'action creation elle-m√™me
                await updateAction(action_creation.id, 'creation', categorie, reference_id);

                // ‚ö° Mettre √† jour la date de l'it√©ration creation associ√©e
                const iterations_creation = await getAllIterationsByActionId(action_creation.id);
                for (const iteration of iterations_creation) {
                    await updateIteration(
                        iteration.id,
                        action_creation.type_action,
                        action_creation.categorie,
                        reference_id,
                        iteration.params,
                        date_creation       // nouvelle date
                    );
                }

                console.log("‚úÖ Action creation et sa date mises √† jour");
            }
        }
        const action_usage = await getActionByReferenceId('usage', categorie, reference_id);
        if (action_usage) {
            // Mettre √† jour l'action usage elle-m√™me
            await updateAction(action_usage.id, 'usage', categorie, reference_id);

            // ‚ö° Mettre √† jour la date des it√©rations usage associ√©es
            const iterations_usage = await getAllIterationsByActionId(action_usage.id);
            for (const iteration of iterations_usage) {
                await updateIteration(
                    iteration.id,
                    action_usage.type_action,
                    action_usage.categorie,
                    reference_id,
                    iteration.params,
                    date_creation       // nouvelle date
                );
            }

        }

        return { status: true, message: "R√©f√©rence modifi√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå Erreur lors de la modification de la r√©f√©rence :", error.message);
        return { status: false, message: error.message };
    }
};

// UPDATE - Mise du r√©f√©rence en non favori
export const putReferenceToNotFavori = async (categorie, reference_id) => {
    console.log("‚ö°‚Äã Mise du r√©f√©rence en non favori...");
    try {
        // modification de la r√©f√©rence
        if (categorie === 'logement') {
            await updateLogement(reference_id, { is_favori: false });
        } else if (categorie === 'transport') {
            await updateTransport(reference_id, { is_favori: false });
        }

        console.log("‚úÖ‚Äã R√©f√©rence mise en non favori avec succ√®s !");
        return { status: true, message: "R√©f√©rence mise en non favori avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la mise en non favori de la r√©f√©rence :", error.message);
        return { status: false, message: error.message };
    }
}

// DELETE - Suppression d'une r√©f√©rence
export const deleteReference = async (reference_id, categorie) => {
    console.log("‚ö°‚Äã Suppression d'une r√©f√©rence...");
    try {
        // v√©rification avant suppression
        // const reference_before = await getReferenceById(categorie, reference_id);
        // console.log("üëâ‚Äã R√©f√©rence √† supprimer :", reference_before);

        // suppression de la r√©f√©rence
        if (categorie === 'logement') {
            await deleteLogement(reference_id);
        } else if (categorie === 'transport') {
            await deleteTransport(reference_id);
        } else if (categorie === 'aliment') {
            await deleteAliment(reference_id);
        }

        // v√©rification apr√®s suppression
        // const reference_after = await getReferenceById(categorie, reference_id);
        // console.log("üëâ‚Äã R√©f√©rence supprim√©e :", reference_after);

        console.log("‚úÖ‚Äã R√©f√©rence supprim√©e avec succ√®s !");
        return { status: true, message: "R√©f√©rence supprim√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression d'une r√©f√©rence :", error.message);
        return { status: false, message: error.message };
    }
}

// FONCTION UTILITAIRE - R√©cup√©ration du is_favori pour une r√©f√©rence
const getIsFavori = (type_action) => {
    let is_favori = false;
    if (type_action === 'creation') { is_favori = true; }
    return is_favori;
}

// FONCTION UTILITAIRE - Affichage des param√®tres d'une r√©f√©rence
export const printParamsReference = (categorie, reference) => {
    console.log("‚ö°‚Äã Affichage des param√®tres d'une r√©f√©rence...");

    // r√©cup√©ration des param√®tres d'une r√©f√©rence
    let params_reference;
    if (categorie === 'logement') {
        params_reference = {
            chauffage_id: reference.chauffage_id,
            superficie_m2: reference.superficie_m2,
            temp_chauffage: reference.temp_chauffage
        };
    } else if (categorie === 'transport') {
        params_reference = {
            categorie_id: reference.categorie_id,
            conso_km: reference.conso_km
        };
    } else if (categorie === 'aliment') {
        params_reference = {
            code: reference.code,
            product_name: reference.nom || reference.product_name || "N/A",
            marques: reference.marques || "N/A",
            tags: reference.tags || [],
        };
    }

    // v√©rification des param√®tres
    // console.log("üëâ‚Äã Param√®tres :", params_reference);

    // console.log("‚úÖ‚Äã Param√®tres affich√©s avec succ√®s !");
    return params_reference;
}