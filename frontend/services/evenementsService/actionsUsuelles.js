/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { getdb } from '@/db/connectdb';

////////////////////////////////////////////////////////////////////////////////////
// ACTIONS USUELLES
////////////////////////////////////////////////////////////////////////////////////

// GET - R√©cup√©ration des actions usuelles
export const getAllActionsUsuelles = async () => {
    console.log("‚ö°‚Äã R√©cup√©ration des actions usuelles...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration des actions usuelles
        const sql = 'SELECT * FROM actions_usuelles';
        const actions_usuelles = await db.getAllAsync(sql);

        // v√©rification des actions usuelles
        // console.log("üëâ‚Äã Actions usuelles :", actions_usuelles);

        console.log("‚úÖ‚Äã Actions usuelles r√©cup√©r√©es avec succ√®s !");
        return { status: true, message: "Actions usuelles r√©cup√©r√©es avec succ√®s !", actions_usuelles: actions_usuelles };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration des actions usuelles :", error.message);
        return { status: false, message: error.message };
    }
}

// GET - R√©cup√©ration d'une action usuelle par son id
export const getActionUsuelleById = async (action_usuelle_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une action usuelle par son id...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de l'action
        const sql = 'SELECT * FROM actions_usuelles WHERE id = ?';
        const action_usuelle = await db.getFirstAsync(sql, [action_usuelle_id]);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Action usuelle :", action_usuelle);

        console.log("‚úÖ‚Äã Action usuelle r√©cup√©r√©e avec succ√®s !");
        return action_usuelle;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une action usuelle par son id :", error.message);
        throw error;
    }
}

// GET - R√©cup√©ration d'une action usuelle par l'id d'une action
export const getActionUsuelleByActionId = async (action_id) => {
    console.log("‚ö°‚Äã R√©cup√©ration d'une action usuelle par l'id d'une action...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration de l'action usuelle
        const sql = 'SELECT * FROM actions_usuelles WHERE action_id = ?';
        const action_usuelle = await db.getFirstAsync(sql, [action_id]);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Action usuelle :", action_usuelle);

        console.log("‚úÖ‚Äã Action usuelle r√©cup√©r√©e avec succ√®s !");
        return action_usuelle;

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration d'une action usuelle par l'id d'une action :", error.message);
        throw error;
    }
}

// CREATE - Cr√©ation d'une action usuelle
export const createActionUsuelle = async (action_id, num_icone, nom, params) => {
    console.log("‚ö°‚Äã Cr√©ation d'une action usuelle...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // cr√©ation de l'action
        const sql = 'INSERT INTO actions_usuelles (action_id, num_icone, nom, params) VALUES (?, ?, ?, ?)';
        await db.runAsync(sql, [action_id, num_icone, nom, JSON.stringify(params)]);

        // v√©rification de la cr√©ation
        // const selectSql = 'SELECT * FROM actions_usuelles ORDER BY id DESC LIMIT 1';
        // const action_usuelle = await db.getFirstAsync(selectSql);
        // console.log("üëâ‚Äã Nouvelle action usuelle :", action_usuelle);

        console.log("‚úÖ‚Äã Action usuelle cr√©√©e avec succ√®s !");
        return { status: true, message: "Action usuelle cr√©√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la cr√©ation d'une action usuelle :", error.message);
        return { status: false, message: error.message };
    }
}

// UPDATE - Modification d'une action usuelle
export const updateActionUsuelle = async (action_usuelle_id, updates) => {
    console.log("‚ö°‚Äã Modification d'une action usuelle...");
    try {
        if (Object.keys(updates).length === 0) {
            throw new Error("‚ùå‚Äã Aucune modification apport√©e √† l'action usuelle");
        }

        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // modification de l'action usuelle
        const fields = Object.keys(updates);
        const values = Object.values(updates);
        const setClause = fields.map((field, index) => `${field} = ?`).join(", ");

        // requ√™te sql
        const sql = `UPDATE actions_usuelles SET ${setClause} WHERE id = ?`;
        await db.runAsync(sql, [...values, action_usuelle_id]);

        // v√©rification de la modification
        // const selectSql = 'SELECT * FROM actions_usuelles WHERE id = ?';
        // const action_usuelle = await db.getFirstAsync(selectSql, [action_usuelle_id]);
        // console.log("üëâ‚Äã Action usuelle modifi√©e :", action_usuelle);

        console.log("‚úÖ‚Äã Action usuelle modifi√©e avec succ√®s !");
        return { status: true, message: "Action usuelle modifi√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la modification de l'action usuelle :", error.message);
        return { status: false, message: error.message };
    }
};

// DELETE - Suppression d'une action usuelle
export const deleteActionUsuelle = async (action_usuelle_id) => {
    console.log("‚ö°‚Äã Suppression d'une action usuelle...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // v√©rification avant suppression
        // const selectSql_before = 'SELECT * FROM actions_usuelles WHERE id = ?';
        // const action_usuelle_before = await db.getFirstAsync(selectSql_before, [action_usuelle_id]);
        // console.log("üëâ‚Äã Action usuelle √† supprimer :", action_usuelle_before);

        // suppression de l'action
        const sql = 'DELETE FROM actions_usuelles WHERE id = ?';
        await db.runAsync(sql, [action_usuelle_id]);

        // v√©rification apr√®s suppression
        // const selectSql_after = 'SELECT * FROM actions_usuelles WHERE id = ?';
        // const action_usuelle_after = await db.getFirstAsync(selectSql_after, [action_usuelle_id]);
        // console.log("üëâ‚Äã Action usuelle supprim√©e :", action_usuelle_after);

        console.log("‚úÖ‚Äã Action usuelle supprim√©e avec succ√®s !");
        return { status: true, message: "Action usuelle supprim√©e avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la suppression d'une action usuelle :", error.message);
        return { status: false, message: error.message };
    }
}

// FONCTION UTILITAIRE - V√©rification de la possibilit√© de cr√©er une action usuelle
export const isPossibleToCreateActionUsuelle = async () => {
    console.log("‚ö°‚Äã V√©rification de la possibilit√© de cr√©er une action usuelle...");
    try {
        // r√©cup√©ration de la base de donn√©es
        const db = await getdb();

        // r√©cup√©ration du nombre d'actions usuelles
        const sql = 'SELECT COUNT(*) FROM actions_usuelles';
        const nb_actions_usuelles = await db.getFirstAsync(sql);

        // v√©rification du nombre d'actions usuelles
        // console.log("üëâ‚Äã Nombre d'actions usuelles :", nb_actions_usuelles['COUNT(*)']);

        if (nb_actions_usuelles['COUNT(*)'] >= 4) {
            console.log("‚ùå‚Äã Le nombre d'actions usuelles est limit√© √† 4 !");
            return { status: true, message: "Le nombre d'actions usuelles est limit√© √† 4 !", is_possible: false };
        }
        else {
            console.log("‚úÖ‚Äã Il est possible de cr√©er une action usuelle !");
            return { status: true, message: "Il est possible de cr√©er une action usuelle !", is_possible: true };
        }

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la v√©rification de la possibilit√© de cr√©er une action usuelle :", error.message);
        return { status: false, message: error.message };
    }
}