/*
Copyright ¬© 2025 TALACATA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { createAliment, getAlimentByCode } from '../referencesService/aliments';
import { createLogement, getLogementNonFavorisByChauffageIdAndSuperficie } from '../referencesService/logements';
import { createTransport, getTransportNonFavorisByCategorieId } from '../referencesService/transports';
import { getAbsenceByActionPassiveId } from '../utilisateurService/absences';
import { createAction, getActionById, getActionByReferenceId, getActionCo2Total, getActionCreationDate, getAllActionsByCategorie } from './actions';
import { createIteration, getAllIterations, getAllIterationsByActionId, printParamsIteration } from './actionsIterations';
import { createPassiveAction, getAllPassiveActions, getAllPassiveActionsByActionId } from './actionsPassives';
import { createReference, getReferenceByActionId, printParamsReference } from './actionsReferences';
import { getActionUsuelleByActionId } from './actionsUsuelles';

////////////////////////////////////////////////////////////////////////////////////
// √âV√âNEMENTS
////////////////////////////////////////////////////////////////////////////////////

// PRINT - Affichage de tous les √©v√©nements
export const printAllEvents = async (period) => {
    // console.log("‚ö°‚Äã Affichage de tous les √©v√©nements...");
    try {
        // r√©cup√©ration de toutes les it√©rations
        const iterations = await getAllIterations();

        if (!iterations || iterations.length === 0) {
            return { status: true, message: "Aucun √©v√©nement trouv√©", events: [], total_co2_by_categorie: {} };
        }

        // r√©cup√©ration de tous les √©v√©nements en parall√®le
        const events = await Promise.all(
            iterations.map(async (iteration) => {
                try {
                    // r√©cup√©ration de l'action associ√©e
                    const action = await getActionById(iteration.action_id);

                    // r√©cup√©ration de la r√©f√©rence associ√©e
                    const reference = await getReferenceByActionId(action.id);
                    // console.log(`üîç Action ${action.id} (${action.type_action}) - R√©f√©rence ${reference.id || reference.code} r√©cup√©r√©e`);

                    // r√©cup√©ration des param√®tres de l'√©v√©nement
                    const params = printEventParams(
                        action.type_action,
                        action.categorie,
                        reference,
                        JSON.parse(iteration.params)
                    );

                    return {
                        action_id: action.id,
                        type_action: action.type_action,
                        action_categorie: action.categorie,
                        action_nom: action.nom,
                        params,
                        co2: iteration.co2,
                        date: iteration.date
                    };
                } catch (err) {
                    // console.warn("‚ö†Ô∏è Erreur sur une it√©ration :", err.message);
                    return null; // On ignore l'√©v√©nement si probl√®me
                }
            })
        );

        // suppression des √©v√©nements null
        let filteredEvents = events.filter(Boolean);

        // console.log(`üìã ${filteredEvents.length} √©v√©nements avant filtrage p√©riode`);

        // filtrage des √©v√©nements par p√©riode
        filteredEvents = filterEventsByPeriod(filteredEvents, period);
        // console.log(`‚è≥ ${filteredEvents.length} √©v√©nements apr√®s filtrage p√©riode (${period})`);

        // tri des √©v√©nements par date
        filteredEvents = sortEventsByDate(filteredEvents);

        // calcul du poids carbone total par cat√©gorie (arrondi √† 2 d√©cimales)
        const total_co2_by_categorie = calculateTotalCo2ForCategorie(filteredEvents);

        // logs finaux
        // console.log("üëâ √âv√©nements :", filteredEvents);
        // console.log("üåç Totaux CO2 :", total_co2_by_categorie);

        // console.log("‚úÖ √âv√©nements affich√©s avec succ√®s !");
        return {
            status: true,
            message: "√âv√©nements affich√©s avec succ√®s !",
            events: filteredEvents,
            total_co2_by_categorie
        };

    } catch (error) {
        // console.log("‚ùå Erreur lors de l'affichage de tous les √©v√©nements :", error.message);
        return { status: false, message: error.message, events: [], total_co2_by_categorie: {} };
    }
};


// PRINT - Affichage de tous les √©v√©nements d'une cat√©gorie
export const printAllEventsByCategorie = async (categorie, period, seuil_co2, objectif) => {
    // console.log("‚ö°‚Äã Affichage de tous les √©v√©nements d'une cat√©gorie...");
    try {
        // r√©cup√©ration de toutes les actions d'une cat√©gorie
        const actions = await getAllActionsByCategorie(categorie);

        // r√©cup√©ration des informations de tous les √©v√©nements
        let events = [];
        for (const action of actions) {
            try {
                const reference = await getReferenceByActionId(action.id); // r√©cup√©ration de la r√©f√©rence associ√©e
                const iterations = await getAllIterationsByActionId(action.id);

                for (const iteration of iterations) {
                    try {
                        const params = printEventParams(action.type_action, action.categorie, reference, JSON.parse(iteration.params)); // r√©cup√©ration des param√®tres de l'√©v√©nement
                        events.push({ iterId: iteration.id, action_id: action.id, type_action: action.type_action, action_categorie: action.categorie, action_nom: action.nom, params: params, co2: iteration.co2, date: iteration.date });
                    } catch (err) {
                        // console.warn("‚ö†Ô∏è Erreur sur une it√©ration :", err.message);
                        // On ignore l'it√©ration si probl√®me
                    }
                }
            } catch (err) {
                // console.warn("‚ö†Ô∏è Erreur sur une action :", err.message);
                // On ignore l'action si probl√®me
            }
        }

        // suppression des √©v√©nements null
        events = events.filter(Boolean);

        // filtrage des √©v√©nements par p√©riode
        events = filterEventsByPeriod(events, period);

        // filtrage des √©v√©nements par seuil de poids carbone
        events = filterEventsByCo2(events, seuil_co2, objectif);

        // tri des √©v√©nements par date
        events = sortEventsByDate(events);

        // v√©rification des √©v√©nements
        // console.log("üëâ‚Äã √âv√©nements d'une cat√©gorie :", events);

        // console.log("‚úÖ‚Äã √âv√©nements d'une cat√©gorie affich√©s avec succ√®s !");
        return { status: true, message: "√âv√©nements d'une cat√©gorie affich√©s avec succ√®s !", events: events };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de l'affichage de tous les √©v√©nements d'une cat√©gorie :", error.message);
        return { status: false, message: error.message };
    }
}

// PRINT - Affichage de tous les √©v√©nements d'une action
export const printAllEventsByActionId = async (action_id) => {
    // console.log("‚ö°‚Äã Affichage de tous les √©v√©nements d'une action...");
    try {
        // r√©cup√©ration de l'action
        const action = await getActionById(action_id);
        // console.log('>>>>> action', action)
        // r√©cup√©ration de la r√©f√©rence
        const reference = await getReferenceByActionId(action_id);
        // console.log('>>>>> ref', reference)
        // r√©cup√©ration des it√©rations
        const iterations = await getAllIterationsByActionId(action_id);
        // console.log('>>>>> iter', iterations)
        // r√©cup√©ration de l'action usuelle
        const action_usuelle = await getActionUsuelleByActionId(action_id);
        // console.log('>>>>> usuelle', action_usuelle)

        // filtrage des it√©rations par p√©riode
        const iterations_filtered = filterEventsByPeriod(iterations, 'Depuis le d√©but');
        // console.log('>>>>> iter filtre', iterations_filtered)

        // r√©cup√©ration des d√©tails de l'action
        const { co2_total, co2_total_unit } = getActionCo2Total(action, iterations_filtered);
        const action_details = {
            action_id: action.id,
            type_action: action.type_action,
            action_categorie: action.categorie,
            action_nom: action.nom,
            reference_id: reference?.id || reference?.code || null,
            reference_nom: reference?.nom || null,
            reference_is_favori: reference?.is_favori || false,
            action_usuelle_id: action_usuelle?.id || null,
            action_usuelle_num_icone: action_usuelle?.num_icone || null,
            actions_passives_ids: (await getAllPassiveActionsByActionId(action.id)).map(a => a.id),
            params: reference ? printParamsReference(action.categorie, reference) : {},
            date_creation: reference ? await getActionCreationDate(action) : null,
            co2_total: co2_total,
            co2_total_unit: co2_total_unit
        };

        // r√©cup√©ration des d√©tails de chaque it√©ration
        let iterations_details = [];
        for (const iteration of iterations_filtered) {
            const params = printParamsIteration(action.type_action, action.categorie, reference, JSON.parse(iteration.params));
            iterations_details.push({
                iteration_id: iteration.id,
                action_passive_id: iteration.action_passive_id,
                date: iteration.date,
                co2: iteration.co2,
                params: params
            });
        }
        // console.log('>>>>> iter detail', iterations_details)

        // tri des it√©rations par date
        iterations_details = sortEventsByDate(iterations_details);

        // console.log("üëâ‚Äã √âv√©nements de l'action :", action_details);
        // console.log("üëâ‚Äã It√©rations de l'action :", iterations_details);

        console.log("‚úÖ‚Äã √âv√©nements d'une action affich√©s avec succ√®s !");
        return { status: true, message: "√âv√©nements d'une action affich√©s avec succ√®s !", action_details: action_details, iterations_details: iterations_details, iterations: iterations_filtered };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de l'affichage de tous les √©v√©nements d'une action :", error.message);
        return { status: false, message: error.message };
    }
}

// PRINT - Affichage de tous les √©v√©nements passifs
export const printAllPassiveEvents = async () => {
    // console.log("‚ö°‚Äã Affichage de tous les √©v√©nements passifs...");
    try {
        // r√©cup√©ration de toutes les actions passives
        const actions_passives = await getAllPassiveActions();

        let passive_events = [];
        for (const action_passive of actions_passives) {
            // r√©cup√©ration de l'action associ√©e
            const action = await getActionById(action_passive.action_id);

            let absence = null;
            if (!action_passive.is_active) { // si l'action passive est inactive, on r√©cup√®re l'absence associ√©e
                absence = await getAbsenceByActionPassiveId(action_passive.id);
            }

            // ajout des informations de l'√©v√©nement passif
            passive_events.push({
                action_passive_id: action_passive.id,
                action_id: action_passive.action_id,
                action_nom: action.nom,
                status: action_passive.is_active,
                params: action_passive.params,
                action_passive_repeat_every: action_passive.repeat_every,
                action_passive_repeat_unit: action_passive.repeat_unit,
                action_passive_date_debut: action_passive.date_debut,
                action_passive_date_fin: action_passive.date_fin,
                absence_id: absence ? absence.id : null,
                absence_date_debut: absence ? absence.date_debut : null,
                absence_date_fin: absence ? absence.date_fin : null
            });
        }

        // tri des √©v√©nements passifs par date de fin d'absence
        passive_events = sortPassiveEventsByDateAbsenceAndDateFin(passive_events);

        // v√©rification des √©v√©nements passifs
        // console.log("üëâ‚Äã √âv√©nements passifs :", passive_events);

        /// console.log("‚úÖ‚Äã √âv√©nements passifs affich√©s avec succ√®s !");
        return { status: true, message: "√âv√©nements passifs affich√©s avec succ√®s !", passive_events: passive_events };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de l'affichage de tous les √©v√©nements passifs :", error.message);
        return { status: false, message: error.message };
    }
}

// CREATE - Cr√©ation d'un √©v√©nement
export const createEvent = async (type_action, categorie, reference_id, params, date) => {
    console.log("‚ö° Cr√©ation d'un √©v√©nement...");

    try {
        // Cr√©ation de la r√©f√©rence si n√©cessaire
        if (!reference_id) {
            console.log("‚ö° R√©f√©rence inexistante, cr√©ation...");
            if (categorie === 'aliment') {
                let aliment = await getAlimentByCode(params.code);
                if (!aliment) {
                    console.log("‚ö° Aliment inconnu, cr√©ation...", params);
                    aliment = await createAliment(
                        params.code,
                        params.product_name,
                        params.marques,
                        params.tags,
                        false
                    );
                    console.log("‚úÖ Aliment cr√©√© :", aliment);
                }
                reference_id = aliment.code;
            } else if (type_action === 'usage' && categorie === 'transport') {
                let transport = await getTransportNonFavorisByCategorieId(params.categorie_id);
                if (!transport) {
                    console.log("‚ö° Transport non favori inconnu, cr√©ation...");
                    transport = await createTransport(params.nom, params.categorie_id, params.conso_km, false);
                    console.log("‚úÖ Transport cr√©√© :", transport);
                }
                reference_id = transport.id;
            } else if (type_action === 'usage' && categorie === 'logement') {
                let logement = await getLogementNonFavorisByChauffageIdAndSuperficie(params.chauffage_id);
                if (!logement) {
                    console.log("‚ö° Logement non favori inconnu, cr√©ation...");
                    logement = await createLogement(params.nom, params.chauffage_id, params.superficie_m2, params.temp_chauffage, false);
                    console.log("‚úÖ Logement cr√©√© :", logement);
                }
                reference_id = logement.id;
            } else {
                const reference = await createReference(categorie, type_action, params);
                console.log("‚úÖ R√©f√©rence cr√©√©e :", reference);
                reference_id = reference.id;
            }
        } else {
            console.log("‚úÖ R√©f√©rence existante :", reference_id);
        }

        // R√©cup√©ration ou cr√©ation des actions
        let action;
        let action_creation_aliment;
        let action_usage_aliment;

        if (categorie === 'aliment') {
            console.log("‚ö° Gestion des actions pour un aliment...");
            action_creation_aliment = await getActionByReferenceId('creation', categorie, reference_id);
            action_usage_aliment = await getActionByReferenceId('usage', categorie, reference_id);

            if (!action_creation_aliment) {
                action_creation_aliment = await createAction('creation', categorie, reference_id);
                console.log("‚úÖ Action cr√©ation aliment :", action_creation_aliment);
            }
            if (!action_usage_aliment) {
                action_usage_aliment = await createAction('usage', categorie, reference_id);
                console.log("‚úÖ Action usage aliment :", action_usage_aliment);
            }
        } else {
            console.log("‚ö° Gestion des actions pour un", categorie, "...");
            action = await getActionByReferenceId(type_action, categorie, reference_id);
            if (!action) {
                action = await createAction(type_action, categorie, reference_id);
                console.log("‚úÖ Action cr√©√©e :", action);
            } else {
                console.log("‚úÖ Action existante :", action);
            }
        }

        // Cr√©ation des it√©rations et actions passives
        if (type_action === 'creation' && categorie === 'logement') {
            console.log("‚ö° D√©but cr√©ation d'un logement...");

            // R√©cup√©rer ou cr√©er l'action de cr√©ation
            let action = await getActionByReferenceId('creation', 'logement', reference_id);
            if (!action) {
                action = await createAction('creation', categorie, reference_id);
                console.log("‚úÖ Action cr√©ation logement cr√©√©e :", action);
            } else {
                console.log("‚úÖ Action cr√©ation logement existante :", action);
            }

            // Cr√©ation de l'it√©ration de cr√©ation
            const action_passive_id = null; // pas d'action passive pour cette it√©ration
            await createIteration(action.id, action_passive_id, reference_id, params, date);
            console.log("‚úÖ It√©ration cr√©ation logement cr√©√©e");

            // R√©cup√©rer ou cr√©er l'action d'usage
            let usage = await getActionByReferenceId('usage', categorie, reference_id);
            if (!usage) {
                usage = await createAction('usage', categorie, reference_id);
                console.log("‚úÖ Action usage logement cr√©√©e :", usage);
            } else {
                console.log("‚úÖ Action usage logement existante :", usage);
            }

            // Cr√©ation de l'action passive
            const repeat_every = 1;
            const repeat_unit = 'jours';
            const dateObj = new Date(date);
            dateObj.setFullYear(dateObj.getFullYear() + 3);
            const date_fin = dateObj.toISOString();

            const response = await createPassiveAction(
                usage.id,
                params,
                repeat_every,
                repeat_unit,
                date,
                date_fin
            );

            if (!response.status) throw new Error(response.message);
            console.log("‚úÖ Action passive cr√©√©e pour le logement :", response);

            console.log("‚úÖ Fin cr√©ation d'un logement avec toutes les √©tapes !");
        }
        else if (type_action === 'usage' && categorie === 'logement') {
            if (params.date_debut) {
                // Cas r√©p√©tition ou usage avec date_debut d√©fini
                console.log("‚ö° Usage d'un logement : cr√©ation action passive avec date_debut...");
                const response = await createPassiveAction(
                    action.id,
                    params,
                    params.repeat_every,
                    params.repeat_unit,
                    params.date_debut,
                    params.date_fin
                );
                if (!response.status) throw new Error(response.message);
                console.log("‚úÖ Action passive cr√©√©e pour l'usage du logement :", response);
            } else {
                // Cas simple : usage pour un jour unique (date_debut = date_fin = date)
                console.log("‚ö° Usage d'un logement : cr√©ation action passive pour un jour simple...");
                const repeat_every = 1;
                const repeat_unit = 'jours';
                const response = await createPassiveAction(
                    action.id,
                    params,
                    repeat_every,
                    repeat_unit,
                    date,
                    date
                );

                if (!response.status) throw new Error(response.message);
                console.log("‚úÖ Action passive cr√©√©e pour l'usage du logement :", response);
            }
        }
        else if (categorie === 'aliment') {
            console.log("‚ö° Cr√©ation des it√©rations pour l'aliment...");
            const action_passive_id = null;
            await createIteration(action_creation_aliment.id, action_passive_id, reference_id, params, date);
            console.log("‚úÖ It√©ration cr√©ation aliment cr√©√©e");
            await createIteration(action_usage_aliment.id, action_passive_id, reference_id, params, date);
            console.log("‚úÖ It√©ration usage aliment cr√©√©e");
        }
        else {
            console.log("‚ö° Cr√©ation d'une it√©ration pour", categorie);
            const action_passive_id = null;
            await createIteration(action.id, action_passive_id, reference_id, params, date);
            console.log("‚úÖ It√©ration cr√©√©e pour", categorie);
        }

        console.log("‚úÖ √âv√©nement cr√©√© avec succ√®s !");
        return { status: true, message: "√âv√©nement cr√©√© avec succ√®s !" };

    } catch (error) {
        console.log("‚ùå Erreur lors de la cr√©ation de l'√©v√©nement :", error.message);
        return { status: false, message: error.message };
    }
};

// FONCTION UTILITAIRE - Affichage des param√®tres d'un √©v√©nement
const printEventParams = (type_action, categorie, reference, params) => {
    // console.log("‚ö°‚Äã Affichage des param√®tres d'un √©v√©nement...");

    // conversion en objet avant r√©cup√©ration des param√®tres (si besoin)
    if (typeof params === 'string') {
        params = JSON.parse(params);
    }

    let params_event;
    if (categorie === 'logement') {
        params_event = {
            chauffage_id: reference.chauffage_id,
            superficie_m2: reference.superficie_m2,
            temp_chauffage: params.temp_chauffage || reference.temp_chauffage,
            co2_unit: 'kgCO2eq'
        };
    } else if (categorie === 'transport') {
        params_event = {
            categorie_id: reference.categorie_id,
            conso_km: params.conso_km || reference.conso_km,
            distance_km: params.distance_km,
            co2_unit: 'kgCO2eq'
        };
    } else if (categorie === 'aliment') {
        params_event = {
            tags: reference.tags,
            quantity_value: params.quantity_value,
            quantity_unit: params.quantity_unit,
            co2_unit: type_action === 'creation' ? 'kgCO2eq' : 'gCO2eq'
        };
    }

    // v√©rification des param√®tres
    // console.log("üëâ‚Äã Param√®tres :", params_event);

    // console.log("‚úÖ‚Äã Param√®tres affich√©s avec succ√®s !");
    return params_event;
}

// FONCTION UTILITAIRE - Filtrage des √©v√©nements par p√©riode
export const filterEventsByPeriod = (events, period, is_previous = false) => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // √† minuit

    return events.filter(event => {
        if (!event.date) return false;

        const eventDate = new Date(event.date);

        // exclure uniquement les √©v√©nements r√©ellement dans le futur
        if (eventDate > now) return false;

        switch (period) {
            case "Aujourd'hui": {
                if (is_previous) {
                    const yesterday = new Date(today);
                    yesterday.setDate(today.getDate() - 1);
                    return eventDate >= yesterday && eventDate < today;
                } else {
                    return eventDate >= today && eventDate <= now;
                }
            }

            case "Cette semaine": {
                const dayOfWeek = today.getDay(); // 0 = dimanche, 1 = lundi, ...
                const mondayThisWeek = new Date(today);
                mondayThisWeek.setDate(today.getDate() - ((dayOfWeek + 6) % 7)); // lundi

                const sundayThisWeek = new Date(mondayThisWeek);
                sundayThisWeek.setDate(mondayThisWeek.getDate() + 6);

                if (is_previous) {
                    const mondayLastWeek = new Date(mondayThisWeek);
                    mondayLastWeek.setDate(mondayThisWeek.getDate() - 7);

                    const sundayLastWeek = new Date(mondayThisWeek);
                    sundayLastWeek.setDate(mondayThisWeek.getDate() - 1);

                    return eventDate >= mondayLastWeek && eventDate <= sundayLastWeek;
                } else {
                    return eventDate >= mondayThisWeek && eventDate <= now;
                }
            }

            case "Ce mois": {
                if (is_previous) {
                    const firstDayLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    const lastDayLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
                    return eventDate >= firstDayLastMonth && eventDate <= lastDayLastMonth;
                } else {
                    const firstDayThisMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    return eventDate >= firstDayThisMonth && eventDate <= now;
                }
            }

            case "Ces 6 derniers mois": {
                if (is_previous) {
                    const startLast6 = new Date(today);
                    startLast6.setMonth(today.getMonth() - 12);
                    const endLast6 = new Date(today);
                    endLast6.setMonth(today.getMonth() - 6);
                    return eventDate >= startLast6 && eventDate < endLast6;
                } else {
                    const start6MonthsAgo = new Date(today);
                    start6MonthsAgo.setMonth(today.getMonth() - 6);
                    return eventDate >= start6MonthsAgo && eventDate <= now;
                }
            }

            case "Cette ann√©e": {
                if (is_previous) {
                    const firstDayLastYear = new Date(today.getFullYear() - 1, 0, 1);
                    const lastDayLastYear = new Date(today.getFullYear() - 1, 11, 31);
                    return eventDate >= firstDayLastYear && eventDate <= lastDayLastYear;
                } else {
                    const firstDayThisYear = new Date(today.getFullYear(), 0, 1);
                    return eventDate >= firstDayThisYear && eventDate <= now;
                }
            }

            case "Depuis le d√©but":
                return eventDate <= now;

            default:
                return false;
        }
    });
};

// FONCTION UTILITAIRE - Filtrage des √©v√©nements par seuil de poids carbone
const filterEventsByCo2 = (events, seuil_co2, objectif) => {
    if (seuil_co2 === 'Tout') {
        return events;
    } else if (seuil_co2 === 'sup') {
        return events.filter(event => event.co2 > objectif);
    } else if (seuil_co2 === 'inf') {
        return events.filter(event => event.co2 <= objectif);
    }
};

// FONCTION UTILITAIRE - Tri des √©v√©nements par date
const sortEventsByDate = (events) => {
    return events.sort((a, b) => new Date(b.date) - new Date(a.date));
};

// FONCTION UTILITAIRE - Calcul du poids carbone total par cat√©gorie (arrondi √† 2 d√©cimales)
const calculateTotalCo2ForCategorie = (events) => {
    const total_co2_logement = Math.round(events.filter(event => event.action_categorie === 'logement').reduce((acc, event) => acc + event.co2, 0) * 100) / 100;
    const total_co2_transport = Math.round(events.filter(event => event.action_categorie === 'transport').reduce((acc, event) => acc + event.co2, 0) * 100) / 100;
    const total_co2_aliment = Math.round(
        events
            .filter(event => event.action_categorie === 'aliment')
            .reduce((acc, event) => {
                const co2_kg = event.type_action === 'usage' ? event.co2 / 1000 : event.co2; // conversion des gCO2eq en kgCO2eq (si l'action est de type usage)
                return acc + co2_kg;
            }, 0) * 100
    ) / 100;

    return { total_co2_logement: total_co2_logement, total_co2_transport: total_co2_transport, total_co2_aliment: total_co2_aliment };
}

// GET - R√©cup√©ration du co2 moyen d'une liste d'√©v√©nements
export const getMoyenneCo2OfEvents = async (events) => {
    // console.log("‚ö°‚Äã R√©cup√©ration du co2 moyen des √©v√©nements...");
    try {
        // r√©cup√©ration du co2 moyen par type d'action
        const moyenne_co2 = calculateMoyenneCo2ByTypeAction(events);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Moyenne co2 cr√©ation :", moyenne_co2.creation);
        // console.log("üëâ‚Äã Moyenne co2 usage :", moyenne_co2.usage);

        // console.log("‚úÖ‚Äã Co2 moyen des √©v√©nements r√©cup√©r√© avec succ√®s !");
        return { status: true, message: "Co2 moyen des √©v√©nements r√©cup√©r√© avec succ√®s !", moyenne_co2: moyenne_co2 };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration du co2 moyen des √©v√©nements :", error.message);
        return { status: false, message: error.message };
    }
}

// GET - R√©cup√©ration du co2 moyen d'une liste d'√©v√©nements pr√©c√©dents
export const getMoyenneCo2OfPreviousEvents = async (events, period) => {
    // console.log("‚ö°‚Äã R√©cup√©ration du co2 moyen des √©v√©nements pr√©c√©dents...");
    try {
        // r√©cup√©ration de tous les √©v√©nements pr√©c√©dents
        const previous_events = await filterEventsByPeriod(events, period, true);

        // r√©cup√©ration du co2 moyen par type d'action
        const moyenne_co2 = calculateMoyenneCo2ByTypeAction(previous_events);

        // v√©rification de la r√©cup√©ration
        // console.log("üëâ‚Äã Moyenne co2 cr√©ation :", moyenne_co2.creation);
        // console.log("üëâ‚Äã Moyenne co2 usage :", moyenne_co2.usage);

        // console.log("‚úÖ‚Äã Co2 moyen des √©v√©nements pr√©c√©dents r√©cup√©r√© avec succ√®s !");
        return { status: true, message: "Co2 moyen des √©v√©nements pr√©c√©dents r√©cup√©r√© avec succ√®s !", moyenne_co2: moyenne_co2 };

    } catch (error) {
        console.log("‚ùå‚Äã Erreur lors de la r√©cup√©ration du co2 moyen des √©v√©nements pr√©c√©dents :", error.message);
        return { status: false, message: error.message };
    }
}

// FONCTION UTILITAIRE - Calcul du co2 moyen par type d'action (arrondi √† 2 d√©cimales)
const calculateMoyenneCo2ByTypeAction = (events) => {
    let total_co2_usage = 0;
    let cpt_usage = 0;
    let total_co2_creation = 0;
    let cpt_creation = 0;

    for (const event of events) {
        if (event.action_categorie === 'logement' && event.type_action === 'creation') {
            total_co2_creation += event.co2;
            cpt_creation++;
        } else if (event.action_categorie === 'logement' && event.type_action === 'usage') {
            total_co2_usage += event.co2;
            cpt_usage++;
        } else if (event.action_categorie === 'transport' && event.type_action === 'creation') {
            total_co2_creation += event.co2;
            cpt_creation++;
        } else if (event.action_categorie === 'transport' && event.type_action === 'usage') {
            total_co2_usage += event.co2;
            cpt_usage++;
        } else if (event.action_categorie === 'aliment' && event.type_action === 'creation') {
            total_co2_creation += event.co2;
            cpt_creation++;
        } else if (event.action_categorie === 'aliment' && event.type_action === 'usage') {
            total_co2_usage += event.co2;
            cpt_usage++;
        }
    }

    const moyenne_co2_usage = Math.round(total_co2_usage / cpt_usage * 100) / 100; // arrondi √† 2 d√©cimales
    const moyenne_co2_creation = Math.round(total_co2_creation / cpt_creation * 100) / 100; // arrondi √† 2 d√©cimales

    return { usage: moyenne_co2_usage, creation: moyenne_co2_creation };
}

// FONCTION UTILITAIRE - Tri des √©v√©nements passifs par date de fin d'absence et de fin d'action passive
const sortPassiveEventsByDateAbsenceAndDateFin = (passive_events) => {
    return passive_events.sort((a, b) => {
        // r√©cup√©ration des dates
        const dateAbsenceA = a.absence_date_fin ? new Date(a.absence_date_fin) : null;
        const dateAbsenceB = b.absence_date_fin ? new Date(b.absence_date_fin) : null;

        const dateActionFinA = a.action_passive_date_fin ? new Date(a.action_passive_date_fin) : null;
        const dateActionFinB = b.action_passive_date_fin ? new Date(b.action_passive_date_fin) : null;

        // 1. cas o√π les deux ont une date de fin d'absence
        if (dateAbsenceA && dateAbsenceB) {
            if (dateAbsenceA.getTime() !== dateAbsenceB.getTime()) {
                return dateAbsenceA - dateAbsenceB;
            }
        }

        // 2. cas o√π un seul a une date de fin d'absence
        if (dateAbsenceA && !dateAbsenceB) return -1;
        if (!dateAbsenceA && dateAbsenceB) return 1;

        // 3. cas o√π les deux ont ou n'ont pas une date de fin d'action passive
        if (dateActionFinA && dateActionFinB) {
            return dateActionFinA - dateActionFinB;
        }

        // 4. cas o√π un seul a une date de fin d'action passive
        if (dateActionFinA && !dateActionFinB) return -1;
        if (!dateActionFinA && dateActionFinB) return 1;

        // 5. par d√©faut, ne pas changer l'ordre
        return 0;
    });
};